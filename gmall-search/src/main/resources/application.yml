server:
  port: 18086
spring:
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.0.101:8848
    sentinel:
      transport:
        port: 8719
        dashboard: 192.168.0.101:8080
    alibaba:
      seata:
        tx-service-group: gmall_tx_group
  zipkin:
    base-url: http://192.168.0.101:9411
    discovery-client-enabled: false
    sender:
      type: web
  sleuth:
    sampler:
      rate: 1
  elasticsearch:
    rest:
      uris: http://192.168.0.101:9200
  jackson:
    default-property-inclusion: non_null # 默认属性包含, 不包含空字段
  thymeleaf:
    cache: false
  rabbitmq:
    host: 192.168.0.101
    port: 5672
    virtual-host: /admin
    username: admin
    password: admin
    # 消费者确认
    listener:
      simple:
        # 设置能者多劳(公平分发): rabbitmq 默认是采用轮训的方式分配消息当有多个消费者接入时，消息的分配模式是一个消费者分配一条，直至消息消费完成.
        prefetch: 1 # 消费完一条消息后才回去 队列获取下一条消息
        concurrency: 8 # 数值取决于 cpu 核数. 此时一个连接会有 8 个信道. 充分发挥每个cpu的性能
        # ack 即是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误
        # 生产者 -> mq -> 消费者. 站在的角度不同 接收站与消费站也不同
        # 消费者确认模式:
        #   nome - 不确认模式, 只要消费者获取了消息, 消息即被确认. 如果程序发生异常等 消息即被丢失
        #   auto - 自动确认, 只要消费者在消费过程中没有异常即被确认, 如果出现异常会无限重试(如果有几条消息发生异常无限重试会耗费大量服务器资源)
        #   manual 手动确认模式, 在消费者最后手动确认 可以 保证消息的安全性
        #
        #     channel.basicack 确认 / basicnack() 不确认 / basicreject() 拒绝消息
        acknowledge-mode: manual
feign:
  sentinel:
    enabled: true

